apiVersion: kargo.akuity.io/v1alpha1
kind: Stage
metadata:
  name: dev
  namespace: kargo-simple
  annotations:
    kargo.akuity.io/color: red
spec:
  requestedFreight:
  - origin:
      kind: Warehouse
      name: guestbook
    sources:
      direct: true
  promotionTemplate:
    spec:
      vars:
      - name: repoURL
        value: https://github.com/sderoe/kargo-simple.git
      - name: branch
        value: main
      - name: image
        value: ghcr.io/sderoe/guestbook
      - name: openpr
        value: "false"
      steps:
      # Clone the Git repository that contains the Kustomize configuration
      # to the ./src directory.
      - uses: git-clone
        config:
          repoURL: ${{ vars.repoURL }}
          checkout:
          - branch: ${{ vars.branch }}
            path: ./src
      # Update the image in the Kustomize configuration located at ./env/<stage>
      # in the repository.
      - uses: kustomize-set-image
        as: update-image
        config:
          path: ./src/env/${{ ctx.stage }}
          images:
          - image: ${{ vars.image }}
            tag: ${{ imageFrom( vars.image ).Tag }}
      # Commit the changes to the Git repository.
      - uses: git-commit
        as: commit
        config:
          path: ./src
          message: ${{ outputs['update-image'].commitMessage }}
      # Push the changes to the Git repository.
      - uses: git-push
        if: ${{ vars.openpr != 'true' }}
        config:
          path: ./src

      # Push the changes to a newly created branch in the Git repository.
      - uses: git-push
        if: ${{ vars.openpr == 'true' }}
        as: push
        config:
          path: ./src
          generateTargetBranch: true
      # Open a pull request to merge the changes into the main branch.
      - uses: git-open-pr
        as: open-pr
        if: ${{ vars.openpr == 'true' }}
        config:
          repoURL: ${{ vars.repoURL }}
          createTargetBranch: true
          sourceBranch: ${{ outputs.push.branch }}
          targetBranch: ${{ vars.branch }}
      # Wait for the pull request to be merged.
      - uses: git-wait-for-pr
        as: wait-for-pr
        if: ${{ vars.openpr == 'true' }}
        config:
          repoURL: ${{ vars.repoURL }}
          prNumber: ${{ outputs['open-pr'].prNumber }}

      # If you have an Argo CD Application that should be synced after the Git
      # repository is updated, uncomment the following lines and specify the
      # app name.
      # - uses: argocd-update
      #   config:
      #     apps:
      #     - name: guestbook-${{ ctx.stage }}
      #       sources:
      #       - repoURL: ${{ vars.repoURL }}
---
apiVersion: kargo.akuity.io/v1alpha1
kind: Stage
metadata:
  name: staging
  namespace: kargo-simple
  annotations:
    kargo.akuity.io/color: amber
spec:
  requestedFreight:
  - origin:
      kind: Warehouse
      name: guestbook
    sources:
      stages:
      - dev
  promotionTemplate:
    spec:
      vars:
      - name: repoURL
        value: https://github.com/sderoe/kargo-simple.git
      - name: branch
        value: main
      - name: image
        value: ghcr.io/sderoe/guestbook
      - name: openpr
        value: "false"
      steps:
      # Clone the Git repository that contains the Kustomize configuration
      # to the ./src directory.
      - uses: git-clone
        config:
          repoURL: ${{ vars.repoURL }}
          checkout:
          - branch: ${{ vars.branch }}
            path: ./src
      # Update the image in the Kustomize configuration located at ./env/<stage>
      # in the repository.
      - uses: kustomize-set-image
        as: update-image
        config:
          path: ./src/env/${{ ctx.stage }}
          images:
          - image: ${{ vars.image }}
            tag: ${{ imageFrom( vars.image ).Tag }}
      # Commit the changes to the Git repository.
      - uses: git-commit
        as: commit
        config:
          path: ./src
          message: ${{outputs['update-image'].commitMessage }}
      # Push the changes to the Git repository.
      - uses: git-push
        if: ${{ vars.openpr != 'true' }}
        config:
          path: ./src

      # Push the changes to a newly created branch in the Git repository.
      - uses: git-push
        if: ${{ vars.openpr == 'true' }}
        as: push
        config:
          path: ./src
          generateTargetBranch: true
      # Open a pull request to merge the changes into the main branch.
      - uses: git-open-pr
        as: open-pr
        if: ${{ vars.openpr == 'true' }}
        config:
          repoURL: ${{ vars.repoURL }}
          createTargetBranch: true
          sourceBranch: ${{ outputs.push.branch }}
          targetBranch: ${{ vars.branch }}
      # Wait for the pull request to be merged.
      - uses: git-wait-for-pr
        as: wait-for-pr
        if: ${{ vars.openpr == 'true' }}
        config:
          repoURL: ${{ vars.repoURL }}
          prNumber: ${{ outputs['open-pr'].prNumber }}

      # If you have an Argo CD Application that should be synced after the Git
      # repository is updated, uncomment the following lines and specify the
      # app name.
      # - uses: argocd-update
      #   config:
      #     apps:
      #     - name: guestbook-${{ ctx.stage }}
      #       sources:
      #       - repoURL: ${{ vars.repoURL }}

---
apiVersion: kargo.akuity.io/v1alpha1
kind: Stage
metadata:
  name: prod
  namespace: kargo-simple
  annotations:
    kargo.akuity.io/color: violet
spec:
  requestedFreight:
  - origin:
      kind: Warehouse
      name: guestbook
    sources:
      stages:
      - staging
  promotionTemplate:
    spec:
      vars:
      - name: repoURL
        value: https://github.com/sderoe/kargo-simple.git
      - name: branch
        value: main
      - name: image
        value: ghcr.io/sderoe/guestbook
      - name: openpr
        value: "true"
      steps:
      # Clone the Git repository that contains the Kustomize configuration
      # to the ./src directory.
      - uses: git-clone
        config:
          repoURL: ${{ vars.repoURL }}
          checkout:
          - branch: ${{ vars.branch }}
            path: ./src
      # Update the image in the Kustomize configuration located at ./env/<stage>
      # in the repository.
      - uses: kustomize-set-image
        as: update-image
        config:
          path: ./src/env/${{ ctx.stage }}
          images:
          - image: ${{ vars.image }}
            tag: ${{ imageFrom( vars.image ).Tag }}
      # Commit the changes to the Git repository.
      - uses: git-commit
        as: commit
        config:
          path: ./src
          message: ${{ outputs['update-image'].commitMessage }}
      # Push the changes to the Git repository.
      - uses: git-push
        if: ${{ vars.openpr != 'true' }}
        config:
          path: ./src

      # Push the changes to a newly created branch in the Git repository.
      - uses: git-push
        if: ${{ vars.openpr == 'true' }}
        as: push
        config:
          path: ./src
          generateTargetBranch: true
      # Open a pull request to merge the changes into the main branch.
      - uses: git-open-pr
        as: open-pr
        if: ${{ vars.openpr == 'true' }}
        config:
          repoURL: ${{ vars.repoURL }}
          createTargetBranch: true
          sourceBranch: ${{ outputs.push.branch }}
          targetBranch: ${{ vars.branch }}
      # Wait for the pull request to be merged.
      - uses: git-wait-for-pr
        as: wait-for-pr
        if: ${{ vars.openpr == 'true' }}
        config:
          repoURL: ${{ vars.repoURL }}
          prNumber: ${{ outputs['open-pr'].prNumber }}

      # If you have an Argo CD Application that should be synced after the Git
      # repository is updated, uncomment the following lines and specify the
      # app name.
      # - uses: argocd-update
      #   config:
      #     apps:
      #     - name: guestbook-${{ ctx.stage }}
      #       sources:
      #       - repoURL: ${{ vars.repoURL }}
